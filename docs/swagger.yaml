# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: RestRace Api
  description: description
  version: "1.0.0"
# the domain of the service
host: localhost:3000
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
  
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization

paths:
  /races/{id}:
     get:
      summary: A specific Race
      description: |
        Returns a race
      parameters:
        - name: id
          in: path
          description: The ID of the Race to get
          required: true
          type: string
        - name: fields
          in: query
          description: The Fields to display. Each field is separated by a comma.
          type: string
      tags:
        - Races
      responses:
        200:
          description: The Race
          schema:
              $ref: '#/definitions/Race'
        404:
          description: Not found
          schema:
              $ref: '#/definitions/NotFoundError'
        default:
          description: Unexpected error
          
  /races:
    get:
      summary: All Races
      description: |
        Returns all Races. Results can be paginated when the 'limit' parameter is specified.
      parameters:
        - name: limit
          in: query
          type: integer
          maximum: 100
          description: The number of items to return per page.
        - name: skip
          in: query
          type: integer
          description: The number of items to to skip. This should be a multiple of the 'limit' parameter
        - name: fields
          in: query
          description: The Fields to display. Each field is separated by a comma.
          type: string
        - name: sort
          in: query
          type: string
          description: The fields to sort the returned items on. Fields can be prefixed with a '-' to sort in reverse order. Each field is separated by a comma.
      tags:
        - Races
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/PaginatedRacesResponse'
        default:
          description: Unexpected error
          
    post:
      summary: Create a new Race
      description: |
        Returns a race
      parameters:
        - name: race
          in: body
          description: The Race to create
          required: true
          schema:
            $ref: '#/definitions/RacePost'
      tags:
        - Races
      responses:
        201:
          description: Created
          schema:
              $ref: '#/definitions/Race'
        default:
          description: Unexpected error
          
  /users:
    get:
      summary: All Users
      description: |
        Returns all User. Results can be paginated when the 'limit' parameter is specified.
      parameters:
        - name: limit
          in: query
          type: integer
          maximum: 100
          description: The number of items to return per page.
        - name: skip
          in: query
          type: integer
          description: The number of items to to skip. This should be a multiple of the 'limit' parameter
        - name: fields
          in: query
          description: The Fields to display. Each field is separated by a comma.
          type: string
        - name: sort
          in: query
          type: string
          description: The fields to sort the returned items on. Fields can be prefixed with a '-' to sort in reverse order. Each field is separated by a comma.
      tags:
        - Users
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/PaginatedUsersResponse'
        default:
          description: Unexpected error
          
    post:
      summary: Register a new Users
        
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegisterUser'
          
      tags:
        - Users
        
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
            
  /../auth/users:
     post:
      summary: Get a Token
        
      parameters:
        - name: tokenRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenRequest'
          
      tags:
        - Users
        
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        
definitions:
  RacePost:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      starttime:
        type: string
        format: date
      tags:
        type: array
        items:
          type: string
      teams:
        type: array
        items:
          type: string
      
  Race:
    type: object
    properties:
      _id:
        type: string
        readOnly: true
      name:
        type: string
      description:
        type: string
      starttime:
        type: string
        format: date
      status:
        type: string
        enum: [notstarted, started, ended]
        default: notstarted
      tags:
        type: array
        items:
          type: string
      teams:
        type: array
        items:
          $ref: '#/definitions/Team'
      pubs:
        type: array
        items:
          $ref: '#/definitions/Pub'
          
  Races:
    type: array
    items:
      $ref: '#/definitions/Race'
  
  Team:
    type: object
    properties:
      _id:
        type: string
  Pub:
    type: object
    properties:
      _id:
        type: string
        
  User:
    type: object
    properties:
      _id:
        type: string
      roles:
        type: array
        items:
          type: string
      local:
        type: object
        properties:
          username:
            type: string
          password:
            type: string
      firstname:
        type: string
      lastname:
        type: string
            
  RegisterUser:
    type: object
    properties:
      roles:
        type: array
        items:
          type: string
      username:
        type: string
      password:
        type: string
      firstname:
        type: string
      lastname:
        type: string
    required:
      - username
      - password
      
  TokenRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
      
  TokenResponse:
    type: object
    properties:
      message:
        type: string
      token:
        type: string
    required:
      - message
      - token
        
        
  PaginatedResponse:
    type: object
    properties:
      totalPages:
        type: integer
      currentPage:
        type: integer
      totalItems:
        type: integer
      limit:
        type: integer
      skip:
        type: integer
      next:
        type: string
        format: url
      prev:
        type: string
        format: url
    required:
      - totalPages
      - currentPage
      - totalItems
      - limit
      - skip
  
  PaginatedRacesResponse:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
      - type: object
        properties:
          items:
            type: array
            items:
               $ref: '#/definitions/Race'
               
  PaginatedUsersResponse:
    allOf:
      - $ref: '#/definitions/PaginatedResponse'
      - type: object
        properties:
          items:
            type: array
            items:
               $ref: '#/definitions/User'
      
          
  NotFoundError:
    allOf:
    - $ref: '#/definitions/Error'
    - properties:
        error: 
          type: object
          properties:
            status:
              type: number
            
  Error:
    type: object
    properties:
      error: 
        type: object
        properties:
          message:
            type: string
          name:
            type: string
          status:
            type: integer
          
    